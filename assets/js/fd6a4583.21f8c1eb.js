"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3296],{47301:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/project-whiteboardflow/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Requirements Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"System Overview","href":"/project-whiteboardflow/docs/requirements/system-overview","docId":"requirements/system-overview","unlisted":false},{"type":"link","label":"System Block Diagram","href":"/project-whiteboardflow/docs/requirements/system-block-diagram","docId":"requirements/system-block-diagram","unlisted":false},{"type":"link","label":"General Requirements","href":"/project-whiteboardflow/docs/requirements/general-requirements","docId":"requirements/general-requirements","unlisted":false},{"type":"link","label":"Features and Requirements","href":"/project-whiteboardflow/docs/requirements/features-and-requirements","docId":"requirements/features-and-requirements","unlisted":false},{"type":"link","label":"Use-case descriptions","href":"/project-whiteboardflow/docs/requirements/use-case-descriptions","docId":"requirements/use-case-descriptions","unlisted":false}],"href":"/project-whiteboardflow/docs/category/requirements-specification"},{"type":"category","label":"System Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Component Descriptions","href":"/project-whiteboardflow/docs/system-architecture/Component Descriptions","docId":"system-architecture/Component Descriptions","unlisted":false},{"type":"link","label":"Class Diagrams","href":"/project-whiteboardflow/docs/system-architecture/Class Diagrams","docId":"system-architecture/Class Diagrams","unlisted":false},{"type":"link","label":"Sequence Diagrams","href":"/project-whiteboardflow/docs/system-architecture/Sequence Diagrams","docId":"system-architecture/Sequence Diagrams","unlisted":false},{"type":"link","label":"Database Diagrams","href":"/project-whiteboardflow/docs/system-architecture/Database Diagrams","docId":"system-architecture/Database Diagrams","unlisted":false}],"href":"/project-whiteboardflow/docs/category/system-architecture"},{"type":"category","label":"API Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Design Document - Part II API","href":"/project-whiteboardflow/docs/api-specification/design-api-intro","docId":"api-specification/design-api-intro","unlisted":false},{"type":"link","label":"API 1 - Swagger Petstore","href":"/project-whiteboardflow/docs/api-specification/openapi-spec","docId":"api-specification/openapi-spec","unlisted":false},{"type":"link","label":"CalculatorModel.java","href":"/project-whiteboardflow/docs/api-specification/calculator-model-generated","docId":"api-specification/calculator-model-generated","unlisted":false}],"href":"/project-whiteboardflow/docs/category/api-specification"},{"type":"category","label":"Test Procedures","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Unit tests","href":"/project-whiteboardflow/docs/testing/unit-testing","docId":"testing/unit-testing","unlisted":false},{"type":"link","label":"Integration tests","href":"/project-whiteboardflow/docs/testing/integration-testing","docId":"testing/integration-testing","unlisted":false},{"type":"link","label":"Acceptance test","href":"/project-whiteboardflow/docs/testing/acceptence-testing","docId":"testing/acceptence-testing","unlisted":false}],"href":"/project-whiteboardflow/docs/category/test-procedures"}]},"docs":{"api-specification/calculator-model-generated":{"id":"api-specification/calculator-model-generated","title":"CalculatorModel.java","description":"(generated using Javadoc to Markdown)","sidebar":"docsSidebar"},"api-specification/design-api-intro":{"id":"api-specification/design-api-intro","title":"Design Document - Part II API","description":"What should be in this section.","sidebar":"docsSidebar"},"api-specification/openapi-spec":{"id":"api-specification/openapi-spec","title":"API 1 - Swagger Petstore","description":"API Specification from openapi.yml","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"WhiteBoardFlow is a tool to help professionals and students entering the development workforce practice whiteboard-style interview questions. Our product will ask interview-style coding questions and prompt the user to reason out their solution through writing and speaking. It will then generate feedback based on the answers and thought processes to guide the user through the correct thought process to solve the problem. The user can then attempt the problem with actual code or using handwriting dictation to determine correctness, optimization, and efficiency and then provide the feedback.","sidebar":"docsSidebar"},"requirements/features-and-requirements":{"id":"requirements/features-and-requirements","title":"Features and Requirements","description":"Functional Requirements","sidebar":"docsSidebar"},"requirements/general-requirements":{"id":"requirements/general-requirements","title":"General Requirements","description":"Users for WhiteBoardFlow must have an internet-connected device with internet access. The app will be created with intended use of a tablet with a stylus for precise writing input. The app will additionally require the use of a microphone.","sidebar":"docsSidebar"},"requirements/system-block-diagram":{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"image","sidebar":"docsSidebar"},"requirements/system-overview":{"id":"requirements/system-overview","title":"System Overview","description":"Project Abstract","sidebar":"docsSidebar"},"requirements/use-case-descriptions":{"id":"requirements/use-case-descriptions","title":"Use-case descriptions","description":"Use Case 1: Mock interview","sidebar":"docsSidebar"},"system-architecture/Class Diagrams":{"id":"system-architecture/Class Diagrams","title":"Class Diagrams","description":"\x3c!--","sidebar":"docsSidebar"},"system-architecture/Component Descriptions":{"id":"system-architecture/Component Descriptions","title":"Component Descriptions","description":"React.js","sidebar":"docsSidebar"},"system-architecture/Database Diagrams":{"id":"system-architecture/Database Diagrams","title":"Database Diagrams","description":"","sidebar":"docsSidebar"},"system-architecture/Sequence Diagrams":{"id":"system-architecture/Sequence Diagrams","title":"Sequence Diagrams","description":"","sidebar":"docsSidebar"},"testing/acceptence-testing":{"id":"testing/acceptence-testing","title":"Acceptance test","description":"Demonstration of all of the functional and non-functional requirements. This can be a combination of automated tests derived from the use-cases (user stories) and manual tests with recorded observation of the results.","sidebar":"docsSidebar"},"testing/integration-testing":{"id":"testing/integration-testing","title":"Integration tests","description":"Tests to demonstrate each use-case based on the use-case descriptions and the sequence diagrams. External input should be provided via mock objects and results verified via mock objects. Integration tests should not require manual entry of data nor require manual interpretation of results.","sidebar":"docsSidebar"},"testing/unit-testing":{"id":"testing/unit-testing","title":"Unit tests","description":"For each method, one or more test cases.","sidebar":"docsSidebar"}}}}')}}]);