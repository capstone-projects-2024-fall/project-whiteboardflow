"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3296],{47301:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/project-whiteboardflow/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Requirements Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"System Overview","href":"/project-whiteboardflow/docs/requirements/system-overview","docId":"requirements/system-overview","unlisted":false},{"type":"link","label":"System Block Diagram","href":"/project-whiteboardflow/docs/requirements/system-block-diagram","docId":"requirements/system-block-diagram","unlisted":false},{"type":"link","label":"General Requirements","href":"/project-whiteboardflow/docs/requirements/general-requirements","docId":"requirements/general-requirements","unlisted":false},{"type":"link","label":"Features and Requirements","href":"/project-whiteboardflow/docs/requirements/features-and-requirements","docId":"requirements/features-and-requirements","unlisted":false},{"type":"link","label":"Use-case descriptions","href":"/project-whiteboardflow/docs/requirements/use-case-descriptions","docId":"requirements/use-case-descriptions","unlisted":false}],"href":"/project-whiteboardflow/docs/category/requirements-specification"},{"type":"category","label":"System Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Component and Technology Overview","href":"/project-whiteboardflow/docs/system-architecture/Component Descriptions","docId":"system-architecture/Component Descriptions","unlisted":false},{"type":"link","label":"Class Diagrams","href":"/project-whiteboardflow/docs/system-architecture/Class Diagrams","docId":"system-architecture/Class Diagrams","unlisted":false},{"type":"link","label":"Sequence Diagrams","href":"/project-whiteboardflow/docs/system-architecture/Sequence Diagrams","docId":"system-architecture/Sequence Diagrams","unlisted":false},{"type":"link","label":"Database Diagrams","href":"/project-whiteboardflow/docs/system-architecture/Database Diagrams","docId":"system-architecture/Database Diagrams","unlisted":false}],"href":"/project-whiteboardflow/docs/category/system-architecture"},{"type":"category","label":"API Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Swagger_API-Specifications","href":"/project-whiteboardflow/docs/api-specification/Swagger_API-Specifications","docId":"api-specification/Swagger_API-Specifications","unlisted":false},{"type":"link","label":"API 1 - Swagger Petstore","href":"/project-whiteboardflow/docs/api-specification/openapi-spec","docId":"api-specification/openapi-spec","unlisted":false}],"href":"/project-whiteboardflow/docs/category/api-specification"},{"type":"category","label":"Test Procedures","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"**Integration Tests**","href":"/project-whiteboardflow/docs/","docId":"testing/integration-testing","unlisted":false},{"type":"link","label":"Unit tests","href":"/project-whiteboardflow/docs/testing/unit-testing","docId":"testing/unit-testing","unlisted":false},{"type":"link","label":"Acceptance test","href":"/project-whiteboardflow/docs/testing/acceptance-testing","docId":"testing/acceptance-testing","unlisted":false}],"href":"/project-whiteboardflow/docs/category/test-procedures"}]},"docs":{"api-specification/openapi-spec":{"id":"api-specification/openapi-spec","title":"API 1 - Swagger Petstore","description":"API Specification from openapi.yml","sidebar":"docsSidebar"},"api-specification/Swagger_API-Specifications":{"id":"api-specification/Swagger_API-Specifications","title":"Swagger_API-Specifications","description":"What should be in this section.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"WhiteBoardFlow is a tool to help professionals and students entering the development workforce practice whiteboard-style interview questions. Our product will ask interview-style coding questions and prompt the user to reason out their solution through writing and speaking. It will then generate feedback based on the answers and thought processes to guide the user through the correct thought process to solve the problem. The user can then attempt the problem with actual code or using handwriting dictation to determine correctness, optimization, and efficiency and then provide the feedback.","sidebar":"docsSidebar"},"requirements/features-and-requirements":{"id":"requirements/features-and-requirements","title":"Features and Requirements","description":"Functional Requirements","sidebar":"docsSidebar"},"requirements/general-requirements":{"id":"requirements/general-requirements","title":"General Requirements","description":"Users for WhiteBoardFlow must have an internet-connected device with internet access. The app will be created with intended use of a tablet with a stylus for precise writing input. The app will additionally require the use of a microphone.","sidebar":"docsSidebar"},"requirements/system-block-diagram":{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"image","sidebar":"docsSidebar"},"requirements/system-overview":{"id":"requirements/system-overview","title":"System Overview","description":"Project Abstract","sidebar":"docsSidebar"},"requirements/use-case-descriptions":{"id":"requirements/use-case-descriptions","title":"Use-case descriptions","description":"Use Case 1: Mock interview","sidebar":"docsSidebar"},"system-architecture/Class Diagrams":{"id":"system-architecture/Class Diagrams","title":"Class Diagrams","description":"Front End Diagram","sidebar":"docsSidebar"},"system-architecture/Component Descriptions":{"id":"system-architecture/Component Descriptions","title":"Component and Technology Overview","description":"This document provides an overview of the key components in the app and the technologies used, including Firebase for backend services, Vercel for deployment, Material-UI for styling, iink-ts for whiteboard functionality, and WebSocket for real-time communication.","sidebar":"docsSidebar"},"system-architecture/Database Diagrams":{"id":"system-architecture/Database Diagrams","title":"Database Diagrams","description":"Entity-Relation Diagram","sidebar":"docsSidebar"},"system-architecture/Sequence Diagrams":{"id":"system-architecture/Sequence Diagrams","title":"Sequence Diagrams","description":"1: Mock Interview","sidebar":"docsSidebar"},"testing/acceptance-testing":{"id":"testing/acceptance-testing","title":"Acceptance test","description":"Demonstration of all of the functional and non-functional requirements. This can be a combination of automated tests derived from the use-cases (user stories) and manual tests with recorded observation of the results.","sidebar":"docsSidebar"},"testing/integration-testing":{"id":"testing/integration-testing","title":"**Integration Tests**","description":"Use Case 1: Mock Interview","sidebar":"docsSidebar"},"testing/unit-testing":{"id":"testing/unit-testing","title":"Unit tests","description":"Unit tests for our front end code will be developed by the author of the code and be created using the Jest testing framework.","sidebar":"docsSidebar"}}}}')}}]);